Directory tree, stemming from root "/home/caleb/repo/ezmd":
├── README.md (63 lines)
├── ezmd (1211)
│   ├── README.md (73)
│   ├── __init__.py (2)
│   ├── config_manager.py (141)
│   ├── converter.py (204)
│   ├── main.py (51)
│   ├── provider_manager.py (152)
│   ├── rsync_manager.py (89)
│   ├── tui.py (468)
│   └── windows_path_utils.py (31)
└── pyproject.toml (12)
----
----
Full Path: pyproject.toml

[project]
name = "ezmd"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "google-genai>=0.4.0",
    "markitdown>=0.0.1a3",
    "textual>=1.0.0",
]


----
Full Path: README.md

# ezmd

ezmd is an **Easy Markdown** tool for converting documents to Markdown using 
[MarkItDown](https://github.com/microsoft/markitdown). 

## Features

- Converts from local files (PDF, docx, images, etc.) or URLs.
- (Optional) LLM-based image descriptions (OpenAI or Google Gemini).
- TUI-based interactive setup and usage.
- Automatic collision handling with `_v2`, `_v3` naming if overwrite is disallowed.
- WSL2 local path support for Windows paths.

## Installation

1. Ensure you have [uv](https://github.com/astral-sh/uv) installed and available.
2. Clone or download this project.
3. `cd` into the project and run:
   ```bash
   uv tool install .
   uv tool update-shell
   ```
4. You can now invoke `ezmd` from the shell.

## Usage

1. **First Run**  
   - If no configuration file exists at `~/.config/ezmd/config.json`, you'll see a first-time setup wizard.
   - Provide base paths, toggle providers, and optionally paste your LLM keys.

2. **Converting a Document**  
   - Run `ezmd` and select "1) Convert a Document".
   - Provide a title and the source (URL or local path).
   - If you have LLM usage enabled, pick which LLM provider (OpenAI or Google).
   - A spinner is displayed, and upon completion, the `.md` file is saved in `~/context/`.

3. **Configuration**  
   - At any time, select "2) Configuration" from the main menu.
   - Change default options, toggle providers, set or clear LLM keys, etc.

4. **Exit**  
   - Choose "3) Exit".

## WSL2 Path Handling

If you’re using Windows paths in WSL2 (e.g., `C:\Users\front\Zotero\paper.pdf`), 
ezmd automatically converts them to `/mnt/c/Users/front/Zotero/paper.pdf`.

## LLM Integration

- **OpenAI**: We store the key in the environment variable `EZMD_OPENAI_KEY`. 
  MarkItDown uses the standard OpenAI API calls for image or PDF embedding usage.
- **Google Gemini**: Some partial support is included, but might need additional 
  code changes if MarkItDown isn't fully compatible with google-genai.

## Development

- You can develop and debug with VSCode by opening the folder in the uv environment, 
  or by editing code directly. You can run `uv run python -m ezmd.main` or `uv run python -m debugpy --listen 5678 -m ezmd.main` for debugging.

## License

This project is licensed under the MIT License.

----
Full Path: ezmd/rsync_manager.py

"""
rsync_manager.py

This file encapsulates logic for performing an rsync operation to a remote host,
and testing connections to confirm the user's SSH environment is set up properly.

We store minimal code to keep the TUI code clean.
"""

import subprocess
import os

def rsync_file(local_file: str, ssh_host: str, remote_dir: str, timeout_sec: int = 10) -> bool:
    """
    Attempt to rsync the given local_file to the remote host's remote_dir.
    Returns True if successful, False if an error or timeout occurs.

    # ASSUMPTION: The user has set up passwordless SSH or SSH keys. 
    # We do not handle passphrase prompts here.
    """
    if not os.path.isfile(local_file):
        print(f"[!] rsync error: local file not found: {local_file}")
        return False

    # Force trailing slash on remote_dir
    if not remote_dir.endswith("/"):
        remote_dir += "/"

    command = [
        "rsync",
        "-avz",  # We assume typical flags; can be extended if user wants compression etc
        local_file,
        f"{ssh_host}:{remote_dir}"
    ]

    try:
        subprocess.run(command, check=True, timeout=timeout_sec, capture_output=True)
        return True
    except subprocess.TimeoutExpired:
        print(f"[!] rsync timed out after {timeout_sec} seconds.")
        return False
    except subprocess.CalledProcessError as e:
        # We can log e.stderr if we want more detail
        print(f"[!] rsync returned an error: {e.stderr}")
        return False
    except Exception as ex:
        print(f"[!] Unexpected rsync error: {ex}")
        return False


def test_rsync_connection(ssh_host: str, remote_dir: str, timeout_sec: int = 10) -> bool:
    """
    We do a quick test to see if rsync works with a dummy file.
    We'll create a small test file in /tmp, then run a --dry-run to confirm connectivity.

    Returns True if test is successful, False otherwise.
    """
    import tempfile
    import uuid

    test_filename = f"ezmd_test_{uuid.uuid4().hex}.txt"
    test_filepath = os.path.join("/tmp", test_filename)

    try:
        with open(test_filepath, "w", encoding="utf-8") as f:
            f.write("ezmd test\n")

        if not remote_dir.endswith("/"):
            remote_dir += "/"

        command = [
            "rsync",
            "--dry-run",
            "-avz",
            test_filepath,
            f"{ssh_host}:{remote_dir}"
        ]
        subprocess.run(command, check=True, timeout=timeout_sec, capture_output=True)
        return True

    except Exception as e:
        print(f"[!] test_rsync_connection error: {e}")
        return False
    finally:
        # Cleanup the local test file
        try:
            os.remove(test_filepath)
        except:
            pass

----
Full Path: ezmd/config_manager.py

"""
Handles saving/loading config from a JSON file in ~/.config/ezmd/config.json,
and a first-time setup wizard if no config file is found.

Now includes a default "remotes" field for the new rsync-based Remote Sync feature.
"""

import os
import json

# CLARIFY: We are assuming a simple JSON-based config. 
# We'll store only the minimal items and rely on environment variables for keys.

DEFAULT_CONFIG = {
    "base_context_dir": "~/context",
    "max_filename_length": 128,
    "force_overwrite_default": False,
    "providers": {
        "openai": {
            "enabled": False,
            "default_model": "gpt-4"
        },
        "google_gemini": {
            "enabled": False,
            "default_model": "gemini-2.0-flash-exp"
        }
    },
    "default_provider": None,
    # New field for storing remotes:
    # {
    #   "alias1": {
    #       "ssh_host": "myuser@myhost",
    #       "remote_dir": "~/my_remote_folder",
    #       "auto_sync": false
    #   }
    # }
    "remotes": {}
}

def get_config_path() -> str:
    """
    Returns the full path to the config file e.g. ~/.config/ezmd/config.json
    """
    home = os.path.expanduser("~")
    config_dir = os.path.join(home, ".config", "ezmd")
    if not os.path.exists(config_dir):
        try:
            os.makedirs(config_dir, exist_ok=True)
        except Exception:
            pass
    config_file = os.path.join(config_dir, "config.json")
    return config_file


def load_config() -> dict:
    """
    Loads the config from config.json.
    Returns None if no config found.
    """
    path = get_config_path()
    if not os.path.exists(path):
        return None
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            # Ensure "remotes" is present
            if "remotes" not in data:
                data["remotes"] = {}
            return data
    except Exception:
        # if there's a parse error, treat as no config
        return None


def save_config(cfg: dict) -> None:
    """
    Writes the config to config.json
    """
    path = get_config_path()
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(cfg, f, indent=2)
    except Exception as e:
        print(f"[!] Failed to write config: {e}")


def init_config_wizard() -> dict:
    """
    First-time setup wizard that returns a new config dict.
    """
    print("\n[No configuration found. Let's do initial setup.]\n")

    cfg = DEFAULT_CONFIG.copy()

    base_dir = input(f"base_context_dir [default={cfg['base_context_dir']}]: ").strip()
    if base_dir:
        cfg["base_context_dir"] = base_dir

    ml = input(f"max_filename_length [default={cfg['max_filename_length']}]: ").strip()
    if ml.isdigit():
        cfg["max_filename_length"] = int(ml)

    fwd = input(f"force_overwrite_default (Y/n) [default=n]: ").strip().lower()
    if fwd.startswith("y"):
        cfg["force_overwrite_default"] = True
    else:
        cfg["force_overwrite_default"] = False

    # openai
    en_oai = input("Enable openai provider? (Y/n): ").strip().lower()
    if en_oai.startswith("y"):
        cfg["providers"]["openai"]["enabled"] = True
        oai_key = input("Enter openai key (paste or blank to skip): ").strip()
        # We'll store it with the environment manager after we return from here
        if oai_key:
            os.environ["EZMD_OPENAI_KEY"] = oai_key
    else:
        cfg["providers"]["openai"]["enabled"] = False

    # google gemini
    en_gg = input("Enable google_gemini provider? (Y/n): ").strip().lower()
    if en_gg.startswith("y"):
        cfg["providers"]["google_gemini"]["enabled"] = True
        gg_key = input("Enter google gemini key (paste or blank to skip): ").strip()
        if gg_key:
            os.environ["EZMD_GOOGLE_GEMINI_KEY"] = gg_key
    else:
        cfg["providers"]["google_gemini"]["enabled"] = False

    # default provider
    defprov = input("Default provider (openai/google_gemini/none)? [none]: ").strip().lower()
    if defprov in ["openai", "google_gemini"]:
        cfg["default_provider"] = defprov
    else:
        cfg["default_provider"] = None

    # Remotes remain empty by default. 
    # We'll prompt user for them in the new "Manage Remotes" menu if needed.

    print("Setup complete! We'll store this config now.\n")
    return cfg

----
Full Path: ezmd/main.py

"""
Main entry point for the ezmd CLI tool.
Handles the initial loading of config, 
and dispatches control to the TUI main menu.
"""

import sys
import os

# CLARIFY: We assume that uv sets up environment variables appropriately for the session,
# but we will attempt to manage them in local processes for now.

from .config_manager import load_config, init_config_wizard, save_config
from .tui import main_menu


def entry_point():
    """
    This is invoked when a user types 'ezmd' from the shell, 
    assuming pyproject.toml has [project.scripts] ezmd="ezmd.main:entry_point".
    """
    config = load_config()

    if config is None:
        # We have no config, let's run the wizard.
        config = init_config_wizard()
        save_config(config)

    while True:
        main_menu(config)
        # TUI handles changes that might need saving. 
        # If they do changes, it calls save_config internally or we can do it after returning.
        # For now, we assume the TUI calls save_config as needed.

        # If the TUI-based actions do not exit, it returns here. 
        # This loop can be used to reload config if needed in the future.

        # If you want to break out, we can do so from within the TUI.
        break


def debug_entry_point():
    """
    Alternate entry point if debugging with debugpy or VSCode 
    so that you can set breakpoints easily.
    """
    entry_point()


if __name__ == "__main__":
    entry_point()

----
Full Path: ezmd/README.md

# ezmd

ezmd is an **Easy Markdown** tool for converting documents to Markdown using 
[MarkItDown](https://github.com/microsoft/markitdown). 

## Features

- Converts from local files (PDF, docx, images, etc.) or URLs.
- (Optional) LLM-based image descriptions (OpenAI only).
- If Google Gemini is selected, MarkItDown is *not* called with the Gemini LLM; 
  instead, ezmd does a *custom* post-processing step, appended to the final Markdown.
- Automatic collision handling: if a file exists, ezmd prompts for a new version 
  or a custom filename, letting you cancel if needed.
- WSL2 path support for Windows paths.

## Installation

1. Ensure you have [uv](https://github.com/astral-sh/uv) installed.
2. Clone or download this project.
3. `cd` into the project and run:
   ```bash
   uv tool install .
   uv tool update-shell
   ```
4. You can now invoke `ezmd` from the shell.

## Environment Variables in `.env`

ezmd stores your API keys in `~/.config/ezmd/ezmd.env`.  
Each time you run the tool, the environment is reloaded, so 
your keys persist across new shells in the uv environment.

For example:
```
EZMD_OPENAI_KEY=sk-...
EZMD_GOOGLE_GEMINI_KEY=AIza...
```

## Usage

1. **First Run**  
   - If no configuration file exists (`~/.config/ezmd/config.json`), 
     you'll see a setup wizard. Provide base paths, toggle providers, 
     and optionally paste your LLM keys.

2. **Converting a Document**  
   - Run `ezmd` -> "1) Convert a Document".
   - Provide a title and the source (URL or local path).
   - Choose an LLM provider (OpenAI or Google Gemini). 
     - If OpenAI, MarkItDown uses OpenAI for image analysis. 
     - If Google Gemini, we skip MarkItDown’s built-in approach and do a custom `_do_gemini_processing` step appended at the end.
   - If collisions occur, ezmd prompts for a new name or `c` to cancel.
   - The `.md` file is saved in `~/context/` by default.

3. **Configuration**  
   - "2) Configuration" from the main menu lets you 
     adjust paths, default providers, etc.

4. **Exit**  
   - Choose "3) Exit".

## Development

- You can develop and debug with VSCode or directly using:
  ```bash
  uv run python -m ezmd.main
  ```
- Logs appear in stdout.  
- The environment variables are stored in `.env` at `~/.config/ezmd/ezmd.env`.

## License

This project is licensed under the MIT License. 

----
Full Path: ezmd/windows_path_utils.py

"""
Detects if a path is Windows-style (like C:\\Users\\front...) and 
translates to a WSL-friendly path (/mnt/c/Users/front...).
"""

import re

def is_windows_path(path: str) -> bool:
    """
    Returns True if 'C:\\' or 'D:\\' etc recognized 
    # CLARIFY: We are ignoring some exotic cases like UNC paths
    """
    return bool(re.match(r"^[a-zA-Z]:\\\\", path))


def translate_windows_path_to_wsl(path: str) -> str:
    """
    Convert e.g. C:\\Users\\front to /mnt/c/Users/front
    # ASSUMPTION: 
    # - We do a naive approach: just convert drive letter to lower, prefix /mnt/.
    # - We also replace backslashes with forward slashes.
    """
    # e.g. "C:\Users\front\Zotero\paper.pdf"
    drive_letter_match = re.match(r"^([a-zA-Z]):\\\\(.*)", path)
    if drive_letter_match:
        drive = drive_letter_match.group(1).lower()
        remainder = drive_letter_match.group(2)
        # Now convert remainder's backslashes to forward slashes:
        remainder = remainder.replace("\\", "/")
        return f"/mnt/{drive}/{remainder}"
    return path

----
Full Path: ezmd/converter.py

"""
Handles the actual process of:
1) Determining final filenames with interactive collision resolution,
2) Downloading/copying raw docs,
3) Calling MarkItDown,
4) Potentially doing a custom call for Google Gemini if the user selected that provider,
5) Returning the path to the final .md file.
"""

import os
import re
import shutil
import requests
import time
from urllib.parse import urlparse
from .provider_manager import get_openai_key, get_google_gemini_key
from .config_manager import save_config
# We still rely on MarkItDown, but only for openai usage.
from markitdown import MarkItDown

def convert_document(
    title: str,
    source: str,
    config: dict,
    provider: str,
    overwrite: bool,
) -> str:
    """
    Convert the given source to markdown in base_context_dir 
    using MarkItDown if openai is chosen for LLM usage, 
    or skip LLM usage if google_gemini is chosen, 
    followed by a custom gemini-based step if provider=google_gemini.

    Returns the path to the final .md file.
    """
    base_context = os.path.expanduser(config.get("base_context_dir", "~/context"))
    raw_dir = os.path.join(base_context, "raw")
    os.makedirs(raw_dir, exist_ok=True)

    max_len = config.get("max_filename_length", 128)

    # sanitize the title -> underscores
    sanitized = re.sub(r"[^\w\s-]", "", title)  # remove weird chars
    sanitized = re.sub(r"\s+", "_", sanitized.strip())  # convert spaces to underscores
    # limit length
    if len(sanitized) > max_len:
        sanitized = sanitized[:max_len]

    # Attempt to guess extension from source
    ext = None
    if source.startswith("http"):
        parsed = urlparse(source)
        path_part = parsed.path
        _, extension = os.path.splitext(path_part)
        if extension:
            ext = extension
        else:
            ext = ".bin"
    else:
        _, extension = os.path.splitext(source)
        if extension:
            ext = extension
        else:
            ext = ".bin"

    if not ext:
        ext = ".bin"

    # Proposed raw path
    raw_base = os.path.join(raw_dir, sanitized)
    raw_path = raw_base + ext

    # Proposed md path
    out_path = os.path.join(base_context, sanitized + ".md")

    # If we have collisions, do interactive approach
    final_raw_path = _resolve_collision_path_interactive(raw_path, overwrite)
    if final_raw_path is None:
        # user canceled
        raise Exception("User canceled the job due to collision in raw path.")

    final_md_path = _resolve_collision_path_interactive(out_path, overwrite)
    if final_md_path is None:
        # user canceled
        raise Exception("User canceled the job due to collision in output md path.")

    # If it's a URL, download
    if source.startswith("http"):
        _download_file(source, final_raw_path)
    else:
        shutil.copy2(source, final_raw_path)

    # MarkItDown usage
    # If user picks openai, we pass an openai client
    # If user picks google_gemini, we do no LLM usage here
    llm_client = None
    llm_model = None

    if provider == "openai":
        import openai
        key = get_openai_key()
        if key:
            openai.api_key = key
            llm_client = openai
            llm_model = config.get("providers", {}).get("openai", {}).get("default_model", "gpt-4")

    # If google_gemini, skip the MarkItDown LLM usage and do a custom approach
    # => We'll do normal MarkItDown with no llm client
    md_instance = MarkItDown(
        llm_client=llm_client,
        llm_model=llm_model,
    )

    result = md_instance.convert(final_raw_path)
    with open(final_md_path, "w", encoding="utf-8") as f:
        f.write(result.text_content)

    # If user selected google_gemini, do a custom pass
    # This is a placeholder: the user can define more advanced image or doc transformations
    if provider == "google_gemini":
        _do_gemini_processing(final_md_path, config)

    return final_md_path


def _download_file(url: str, dest: str) -> None:
    """
    Download the file from url and write to dest.
    """
    r = requests.get(url, stream=True)
    r.raise_for_status()
    with open(dest, "wb") as f:
        for chunk in r.iter_content(chunk_size=8192):
            f.write(chunk)


def _resolve_collision_path_interactive(path: str, overwrite: bool) -> str or None:
    """
    If overwrite=True, we can just use path. If it exists, we overwrite.
    If overwrite=False, then if path exists, we propose <path>_v2, _v3, etc.
    and ask user for confirmation or a custom name. 
    The user can also type 'c' to cancel.

    Returns the final chosen path, or None if user canceled.
    """
    if overwrite:
        return path

    if not os.path.exists(path):
        return path

    # If there's a collision, propose version increments
    base, ext = os.path.splitext(path)
    idx = 2
    while True:
        proposed = f"{base}_v{idx}{ext}"
        idx += 1
        if not os.path.exists(proposed):
            break

    while True:
        print(f"\n[COLLISION] File already exists: {path}")
        print(f"Proposed: {proposed}")
        user_input = input("Enter new filename (absolute path) or press Enter to accept proposed, or 'c' to cancel: ").strip()
        if user_input.lower() == "c":
            return None
        elif user_input == "":
            # user accepts proposed
            return proposed
        else:
            # user typed a path
            # check if that path also exists
            if os.path.exists(user_input):
                print("[!] That path also exists, let's try again.")
                continue
            return user_input


def _do_gemini_processing(md_path: str, config: dict) -> None:
    """
    This is a placeholder for custom Gemini usage. 
    If we want to do e.g. image annotation or advanced doc transformations, 
    we can do so here, reading the .md file, applying transformations, 
    and rewriting it.

    # ASSUMPTION: We'll just append a note that "Gemini was used" for now.
    """
    from .provider_manager import get_google_gemini_key
    gem_key = get_google_gemini_key()
    if not gem_key:
        return  # No key, can't do anything.

    # In a real scenario, we might do something like:
    #  from google import genai
    #  client = genai.Client(api_key=gem_key, model="gemini-2.0-flash-exp")
    #  ... do something with md_path ...
    #
    # For demonstration, we'll just append a line to the MD file:

    try:
        with open(md_path, "a", encoding="utf-8") as f:
            f.write("\n\n---\n_Google Gemini custom processing step was invoked._\n")
    except Exception as e:
        print(f"[!] Gemini post-processing error: {e}")

----
Full Path: ezmd/provider_manager.py

"""
Manages environment variables for storing and retrieving
OpenAI and Google Gemini keys. Also checks availability.
Now persists these keys in ~/.config/ezmd/ezmd.env.
"""

import os
import re
# ASSUMPTION: We'll parse and rewrite a simple .env file in ~/.config/ezmd

from .config_manager import get_config_path

def _get_env_file_path() -> str:
    """
    Return the path to the environment (.env) file used by ezmd.
    We'll store this as <config_dir>/ezmd.env
    """
    cfg_path = get_config_path()  # e.g. ~/.config/ezmd/config.json
    config_dir = os.path.dirname(cfg_path)
    return os.path.join(config_dir, "ezmd.env")


def _load_env_file() -> dict:
    """
    Load environment variables from the .env file and return them as a dict.
    """
    env_path = _get_env_file_path()
    result = {}
    if not os.path.exists(env_path):
        return result
    try:
        with open(env_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                # skip blanks/comments
                if not line or line.startswith("#"):
                    continue
                # parse KEY=val
                # naive parse
                if "=" in line:
                    key, val = line.split("=", 1)
                    result[key.strip()] = val.strip()
    except Exception:
        pass
    return result


def _save_env_file(envdict: dict) -> None:
    """
    Save the envdict to the .env file, overwriting its contents.
    """
    env_path = _get_env_file_path()
    lines = []
    for k, v in envdict.items():
        # If v has spaces or special chars, user must handle quotes etc.
        # We'll keep it simple and not do advanced quoting.
        lines.append(f"{k}={v}")
    try:
        with open(env_path, "w", encoding="utf-8") as f:
            f.write("# ezmd environment variables\n")
            for line in lines:
                f.write(line + "\n")
    except Exception as e:
        print(f"[!] Failed to write .env file: {e}")


def _persist_in_memory(envdict: dict) -> None:
    """
    Update the in-memory os.environ to match envdict.
    We do not remove other keys that might exist.
    """
    for k, v in envdict.items():
        os.environ[k] = v


# Let's load them upon import so that environment is available
_loaded = _load_env_file()
_persist_in_memory(_loaded)


def set_openai_key(key: str) -> None:
    """
    Sets or clears the openai key in the environment and .env file.
    If key is None or empty string, we remove it from env.
    """
    envdict = _load_env_file()

    if key:
        envdict["EZMD_OPENAI_KEY"] = key
        os.environ["EZMD_OPENAI_KEY"] = key
    else:
        if "EZMD_OPENAI_KEY" in envdict:
            del envdict["EZMD_OPENAI_KEY"]
        if "EZMD_OPENAI_KEY" in os.environ:
            del os.environ["EZMD_OPENAI_KEY"]

    _save_env_file(envdict)


def get_openai_key() -> str:
    """
    Returns the openai key from environment (which is also loaded from .env).
    """
    return os.environ.get("EZMD_OPENAI_KEY", "")


def set_google_gemini_key(key: str) -> None:
    """
    Sets or clears the google gemini key in the environment and .env file.
    """
    envdict = _load_env_file()

    if key:
        envdict["EZMD_GOOGLE_GEMINI_KEY"] = key
        os.environ["EZMD_GOOGLE_GEMINI_KEY"] = key
    else:
        if "EZMD_GOOGLE_GEMINI_KEY" in envdict:
            del envdict["EZMD_GOOGLE_GEMINI_KEY"]
        if "EZMD_GOOGLE_GEMINI_KEY" in os.environ:
            del os.environ["EZMD_GOOGLE_GEMINI_KEY"]

    _save_env_file(envdict)


def get_google_gemini_key() -> str:
    return os.environ.get("EZMD_GOOGLE_GEMINI_KEY", "")


def is_openai_available(config: dict) -> bool:
    """
    Returns True if openai is enabled in config and we have a key in env.
    """
    if not config:
        return False
    providers = config.get("providers", {})
    oinfo = providers.get("openai", {})
    if not oinfo.get("enabled", False):
        return False
    return len(get_openai_key()) > 0


def is_google_gemini_available(config: dict) -> bool:
    """
    Returns True if google gemini is enabled in config and we have a key in env.
    """
    if not config:
        return False
    providers = config.get("providers", {})
    ginfo = providers.get("google_gemini", {})
    if not ginfo.get("enabled", False):
        return False
    return len(get_google_gemini_key()) > 0

----
Full Path: ezmd/__init__.py

# ezmd/__init__.py
# ASSUMPTION: This file intentionally left minimal to designate ezmd as a Python package.

----
Full Path: ezmd/tui.py

"""
Provides all the TUI (text user interface) flows for ezmd:
 - Main menu
 - Convert flow
 - Config menu
 - Provider sub-menu
 - NEW: Remote sync flows (remotes sub-menu) and post-conversion sync logic
"""

import os
import time
import sys
import subprocess
from .converter import convert_document
from .config_manager import save_config, load_config
from .provider_manager import (
    is_openai_available,
    is_google_gemini_available,
    set_openai_key,
    set_google_gemini_key,
)
from .windows_path_utils import is_windows_path, translate_windows_path_to_wsl
from .rsync_manager import rsync_file, test_rsync_connection

def main_menu(config: dict) -> None:
    """
    Display the main menu in a loop, until user selects exit.
    """
    while True:
        print("\n┌────────────────────────────────┐")
        print("│ ezmd - Easy Markdown Tool     │")
        print("├────────────────────────────────┤")
        print("│ 1) Convert a Document         │")
        print("│ 2) Configuration              │")
        print("│ 3) Exit                       │")
        print("└────────────────────────────────┘")

        choice = input("Select an option: ").strip()
        if choice == "1":
            convert_document_flow(config)
        elif choice == "2":
            config_menu(config)
        elif choice == "3":
            print("Exiting ezmd...")
            sys.exit(0)
        else:
            print("[!] Invalid choice, please try again.")


def convert_document_flow(config: dict) -> None:
    """
    Interactive flow for converting a document. 
    Prompts user for title, source, provider, overwrite, etc.
    Post-conversion, we handle remote sync logic.
    """
    print("\n[Convert Document]\n")
    title = input("Enter Title: ").strip()
    source = input("Enter Source (URL or local path): ").strip()

    # Determine available providers
    available_providers = []
    if is_openai_available(config):
        available_providers.append("openai")
    if is_google_gemini_available(config):
        available_providers.append("google_gemini")

    default_provider = config.get("default_provider", None)
    if default_provider not in available_providers:
        default_provider = None

    print("\nAvailable LLM Providers:")
    print(" (0) None (no LLM usage)")
    for idx, prov in enumerate(available_providers, start=1):
        mark = "(default)" if prov == default_provider else ""
        print(f" ({idx}) {prov} {mark}")

    provider_choice = input("Choose LLM provider [Press Enter for default]: ").strip()
    chosen_provider = None
    if provider_choice == "":
        chosen_provider = default_provider
    else:
        if provider_choice == "0":
            chosen_provider = None
        else:
            try:
                numeric = int(provider_choice)
                if 1 <= numeric <= len(available_providers):
                    chosen_provider = available_providers[numeric - 1]
                else:
                    print("[!] Invalid provider selection, ignoring.")
                    chosen_provider = None
            except ValueError:
                print("[!] Invalid provider selection, ignoring.")
                chosen_provider = None

    # Overwrite or interactive version approach
    force_overwrite_default = config.get("force_overwrite_default", False)
    prompt = (
        f"Overwrite if file exists? (Y/n) [default={'Y' if force_overwrite_default else 'N'}]: "
    )
    ow_input = input(prompt).strip().lower()

    if ow_input == "":
        overwrite = True if force_overwrite_default else False
    elif ow_input.startswith("y"):
        overwrite = True
    else:
        overwrite = False

    # local path check
    if not source.startswith("http"):
        if is_windows_path(source):
            source = translate_windows_path_to_wsl(source)

        if not os.path.exists(source):
            print(f"[!] Local file path does not exist: {source}")
            return

    print("\n[Converting... please wait]")
    import threading

    spinner_stop = False

    def spinner_run():
        symbols = ["-", "\\", "|", "/"]
        idx = 0
        while not spinner_stop:
            sys.stdout.write("\r" + "[Converting... " + symbols[idx] + "]")
            sys.stdout.flush()
            idx = (idx + 1) % len(symbols)
            time.sleep(0.1)
        sys.stdout.write("\r[✔ Conversion Complete]     \n")

    thread = threading.Thread(target=spinner_run)
    thread.start()

    md_path = None
    error_message = None
    try:
        md_path = convert_document(
            title=title,
            source=source,
            config=config,
            provider=chosen_provider,
            overwrite=overwrite,
        )
    except Exception as ex:
        error_message = str(ex)

    spinner_stop = True
    thread.join()

    if error_message:
        print(f"[!] Error during conversion: {error_message}")
    else:
        print(f"[+] Output saved to {md_path}")
        # Post-conversion, let's handle remote sync
        if md_path:
            # In future, if multiple files, we might pass a list. For now, single-file approach.
            _handle_post_conversion_rsync(md_path, config)


def _handle_post_conversion_rsync(md_path: str, config: dict):
    """
    This function:
      1) Auto-syncs to all remotes with auto_sync=true
      2) If there are other remotes, prompts the user to optionally sync to multiple
    """
    remotes = config.get("remotes", {})
    if not remotes:
        return  # No remotes configured

    # 1) Auto-sync
    any_auto = False
    for alias, info in remotes.items():
        if info.get("auto_sync", False):
            any_auto = True
            success = rsync_file(md_path, info["ssh_host"], info["remote_dir"], timeout_sec=10)
            if not success:
                print(f"[!] Warning: auto-sync to remote '{alias}' failed.")
    # 2) Multi-select if user wants
    # If there are no auto-sync or the user might want additional
    # We'll ask "Would you like to sync to additional remote(s)?"
    if not any_auto:
        # No auto-sync, so let's see if user wants to sync
        choice = input("Sync new .md file(s) to a remote? (y/N): ").strip().lower()
        if choice.startswith("y"):
            # We'll do multi-select
            _choose_and_sync_remotes(md_path, remotes)
    else:
        # Some auto-sync happened. Do we also want to let them sync to additional?
        choice = input("Sync to additional remote(s) as well? (y/N): ").strip().lower()
        if choice.startswith("y"):
            _choose_and_sync_remotes(md_path, remotes)


def _choose_and_sync_remotes(md_path: str, remotes: dict):
    """
    Let the user pick multiple remote aliases from a list. 
    Then for each chosen alias, do an rsync.
    """
    if not remotes:
        return
    aliases = list(remotes.keys())
    print("\nAvailable remotes:")
    for idx, alias in enumerate(aliases, start=1):
        print(f" ({idx}) {alias} -> {remotes[alias]['ssh_host']}:{remotes[alias]['remote_dir']}")

    print("\nEnter a comma-separated list of remotes to sync (e.g. '1,3') or blank to skip.")
    sel = input("Selection: ").strip()
    if not sel:
        return

    # parse selection
    choices = []
    for part in sel.split(","):
        part = part.strip()
        try:
            i = int(part)
            if 1 <= i <= len(aliases):
                choices.append(aliases[i-1])
        except:
            print(f"[!] Invalid selection: {part}")

    # Now perform rsync for each
    for alias in choices:
        info = remotes[alias]
        success = rsync_file(md_path, info["ssh_host"], info["remote_dir"], timeout_sec=10)
        if not success:
            print(f"[!] Warning: sync to '{alias}' failed.")


def config_menu(config: dict) -> None:
    """
    Show the configuration menu. 
    Allows editing base_context_dir, max_filename_length,
    force_overwrite_default, default_provider, etc.
    """
    while True:
        print("\n┌──────────────────────────────────┐")
        print("│ ezmd Configuration             │")
        print("├──────────────────────────────────┤")
        base_context_dir = config.get("base_context_dir", "~/context")
        max_len = config.get("max_filename_length", 128)
        fwd = config.get("force_overwrite_default", False)
        defprov = config.get("default_provider", None)

        print(f"│ base_context_dir: {base_context_dir}")
        print(f"│ max_filename_length: {max_len}")
        print(f"│ force_overwrite_default: {fwd}")
        print(f"│ default_provider: {defprov}")
        print("├──────────────────────────────────┤")
        print("│ Providers:                     │")
        provs = config.get("providers", {})
        for pname, pinfo in provs.items():
            en = pinfo.get("enabled", False)
            print(f"│   {pname} -> enabled: {en}")
        print("├──────────────────────────────────┤")
        print("│ Remotes:                       │")
        # Show a quick summary of the user's configured remotes
        for alias, info in config.get("remotes", {}).items():
            ssh_host = info.get("ssh_host", "???")
            rdir = info.get("remote_dir", "???")
            autos = info.get("auto_sync", False)
            print(f"│   {alias} -> {ssh_host}:{rdir}, auto_sync={autos}")
        print("├──────────────────────────────────┤")
        print("│ a) Edit base_context_dir        │")
        print("│ b) Edit max_filename_length     │")
        print("│ c) Toggle force_overwrite       │")
        print("│ d) Edit default_provider        │")
        print("│ e) Manage providers...          │")
        print("│ r) Manage remotes...            │")
        print("│ f) Return to main menu          │")
        print("└──────────────────────────────────┘")

        choice = input("Select an option: ").strip().lower()
        if choice == "a":
            new_val = input("New base_context_dir (blank to skip): ").strip()
            if new_val:
                config["base_context_dir"] = new_val
                save_config(config)
        elif choice == "b":
            new_val = input("New max_filename_length (blank to skip): ").strip()
            if new_val.isdigit():
                config["max_filename_length"] = int(new_val)
                save_config(config)
        elif choice == "c":
            config["force_overwrite_default"] = not config.get("force_overwrite_default", False)
            save_config(config)
            print(f"force_overwrite_default is now {config['force_overwrite_default']}")
        elif choice == "d":
            new_val = input("Enter default provider name (openai/google_gemini) or blank to disable default: ").strip()
            if new_val in ["openai", "google_gemini"]:
                config["default_provider"] = new_val
            else:
                config["default_provider"] = None
            save_config(config)
        elif choice == "e":
            providers_submenu(config)
        elif choice == "r":
            manage_remotes_menu(config)
        elif choice == "f":
            break
        else:
            print("[!] Invalid choice")


def manage_remotes_menu(config: dict) -> None:
    """
    Submenu to manage the rsync-based remote sync configurations.
    """
    while True:
        print("\n┌──────────────────────────────────┐")
        print("│ Manage Remotes                 │")
        print("├──────────────────────────────────┤")
        remotes = config.get("remotes", {})
        if not isinstance(remotes, dict):
            config["remotes"] = {}
            remotes = config["remotes"]

        # Show a summary
        if remotes:
            for alias, info in remotes.items():
                print(f"   ALIAS: {alias}")
                print(f"      ssh_host: {info.get('ssh_host','???')}")
                print(f"      remote_dir: {info.get('remote_dir','???')}")
                print(f"      auto_sync: {info.get('auto_sync',False)}")
                print("")
        else:
            print("  (No remotes configured)")

        print("├──────────────────────────────────┤")
        print("│ 1) Add Remote                   │")
        print("│ 2) Edit Remote                  │")
        print("│ 3) Remove Remote                │")
        print("│ 4) Return...                    │")
        print("└──────────────────────────────────┘")

        choice = input("Select an option: ").strip()
        if choice == "1":
            _add_new_remote(remotes)
            save_config(config)
        elif choice == "2":
            _edit_remote(remotes, config)
        elif choice == "3":
            _remove_remote(remotes, config)
        elif choice == "4":
            break
        else:
            print("[!] Invalid selection")


def _add_new_remote(remotes: dict):
    """
    Prompt the user for a new alias, ssh_host, remote_dir. 
    Then attempt a test run. If success, optionally set auto_sync.
    """
    alias = input("Enter alias (e.g. 'mylaptop'): ").strip()
    if not alias:
        print("[!] Alias is empty, aborting.")
        return
    if alias in remotes:
        print("[!] That alias already exists.")
        return

    ssh_host = input("ssh_host (e.g. user@myhost): ").strip()
    remote_dir = input("remote_dir (default=~): ").strip() or "~"

    # Test the connection
    print("\nTesting rsync connection with a dummy file (dry-run)...")
    success = test_rsync_connection(ssh_host, remote_dir, timeout_sec=10)
    if not success:
        print("[!] Test failed. You can still add this remote, but it might not work.")
        choice = input("Add anyway? (y/N): ").strip().lower()
        if not choice.startswith("y"):
            return

    # auto_sync
    ask_sync = input("Enable auto_sync for this remote by default? (y/N): ").strip().lower()
    auto_sync = True if ask_sync.startswith("y") else False

    # Save
    remotes[alias] = {
        "ssh_host": ssh_host,
        "remote_dir": remote_dir,
        "auto_sync": auto_sync
    }
    print(f"[+] Remote '{alias}' added.")


def _edit_remote(remotes: dict, config: dict):
    """
    Let user pick a remote alias to edit. Then let them update fields, re-test, etc.
    """
    if not remotes:
        print("[!] No remotes to edit.")
        return
    aliases = list(remotes.keys())
    print("\nWhich remote do you want to edit?")
    for idx, a in enumerate(aliases, start=1):
        print(f" {idx}) {a}")

    choice = input("Selection: ").strip()
    try:
        idx = int(choice)
        alias = aliases[idx-1]
    except:
        print("[!] Invalid choice.")
        return

    info = remotes[alias]
    print(f"Editing remote '{alias}'...")

    new_ssh = input(f"ssh_host [current={info['ssh_host']}] (blank to skip): ").strip()
    if new_ssh:
        info["ssh_host"] = new_ssh

    new_dir = input(f"remote_dir [current={info['remote_dir']}] (blank to skip): ").strip()
    if new_dir:
        info["remote_dir"] = new_dir

    # test
    test_choice = input("Test connection again? (y/N): ").strip().lower()
    if test_choice.startswith("y"):
        success = test_rsync_connection(info["ssh_host"], info["remote_dir"], timeout_sec=10)
        if success:
            print("[+] Test succeeded.")
        else:
            print("[!] Test failed. You can proceed, but it might not work in practice.")

    # auto_sync
    ask_sync = input(f"auto_sync? [current={info.get('auto_sync',False)}] (y=enable / n=disable / Enter=skip): ").strip().lower()
    if ask_sync == "y":
        info["auto_sync"] = True
    elif ask_sync == "n":
        info["auto_sync"] = False

    remotes[alias] = info
    print("[+] Remote updated.")
    # We don't strictly need to do config object merges, but let's do it
    config["remotes"] = remotes


def _remove_remote(remotes: dict, config: dict):
    """
    Pick an alias to remove from the dictionary.
    """
    if not remotes:
        print("[!] No remotes to remove.")
        return
    aliases = list(remotes.keys())
    print("\nWhich remote do you want to remove?")
    for idx, a in enumerate(aliases, start=1):
        print(f" {idx}) {a}")

    choice = input("Selection: ").strip()
    try:
        idx = int(choice)
        alias = aliases[idx-1]
    except:
        print("[!] Invalid choice.")
        return

    confirm = input(f"Are you sure you want to remove remote '{alias}'? (y/N): ").strip().lower()
    if confirm.startswith("y"):
        del remotes[alias]
        config["remotes"] = remotes
        print(f"[+] Remote '{alias}' removed.")

